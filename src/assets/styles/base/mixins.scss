//Percent
@function percent($px, $from) {
    $result: math.div($px, $from) * 100%;
    @return $result;
}
//toRem
@function toRem($px) {
    $result: math.div($px, 16) + rem;
    @return $result;
}
//EM
@function em($px, $current: 16) {
    $result: math.div($px, $current) + em;
    @return $result;
}
// text gradient
@mixin text-gradient($start-color, $end-color) {
    background: -webkit-linear-gradient(77.41deg, $start-color 7.87%, $end-color 102.55%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}
// background gradient
@mixin background-gradient($start-color, $end-color) {
    background: linear-gradient(77.41deg, #{$start-color} 7.87%, #{$end-color} 102.55%);
}
// Accent text gradient
@mixin color-accent() {
    @include text-gradient($accent, $accent_light);
}
// Accent background gradient
@mixin background-accent() {
    @include background-gradient($accent, $accent_light);
}

// Row Flex
@mixin flexRow($align: initial, $justify: initial) {
    display: flex;
    flex-direction: row;
    align-items: $align;
    justify-content: $justify;
}

// Column Flex
@mixin flexColumn($align: initial, $justify: initial) {
    display: flex;
    flex-direction: column;
    align-items: $align;
    justify-content: $justify;
}

// Адаптивное свойство (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
    @if ($startSize==0) {
        $startSize: 0.000001;
    }
    @if ($minSize==0) {
        $minSize: 0.000001;
    }

    // Для calc();
    $addSize: math.div($startSize - $minSize, 16);

    @if ($maxWidthContainer == 0) {
        $widthFrom: $maxWidth;
    }

    // Брейк-поинты в EM
    $widthFromMedia: em($widthFrom);
    $widthToMedia: em($widthTo);

    // Формула плавающего значения
    $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
    $yIntersection: -$widthTo * $slope + $minSize;
    @if ($yIntersection==0) {
        $yIntersection: 0.000001;
    }
    $flyValue: #{toRem($yIntersection)}" + " #{$slope * 100}vw;

    // Получение значения свойства
    $propertyValue: #{"clamp(" toRem($minSize) "," $flyValue "," toRem($startSize) ")"};
    // Если отрицательные значения
    @if ($minSize > $startSize) {
        $propertyValue: #{"clamp(" toRem($startSize) "," $flyValue "," toRem($minSize) ")"};
    }

    // Если поддерживается clamp();
    @supports (#{$property}: $propertyValue) {
        #{$property}: $propertyValue;
    }

    // Если не поддерживается clamp();
    @supports not (#{$property}: $propertyValue) {
        #{$property}: calc(
            #{toRem($minSize)} + #{$addSize} * (100vw - #{toRem($widthTo)}) / #{math.div($widthFrom, 16) -
                math.div($widthTo, 16)}
        );
    }

    // Устанавливаем значения по умолчанию
    @if $widthFrom != $maxWidth and $keepSize != 1 and $keepSize != 2 {
        @media (min-width: $widthFromMedia) {
            #{$property}: inherit;
        }
    }
    @if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
        @media (max-width: $widthToMedia) {
            #{$property}: inherit;
        }
    }
}